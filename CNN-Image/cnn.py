import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import numpy as np
import scipy.io as sio

batch_size = 32
num_classes = 10
epochs = 20
data_augmentation = False
num_predictions = 20
model_name = 'stat_441_DC2.h5'

##Loading dataset
train = sio.loadmat("train.mat")
test = sio.loadmat("test.mat")

##Subsetting dataset into training and testing set and normalize it
train_X = train['X']
train_y = keras.utils.to_categorical(train['y']-1,10)
#train_X /= np.max(train_X)

test_X = test['X']
#test_X /= np.max(test_X)

##Reshaping Train data
train_X = train_X.transpose(3,0,1,2)
##Reshaping Test data
test_X = test_X.transpose(3,0,1,2)
#train_X = train_X/255
#test_X = test_X/255







model = Sequential()


###First Convolutional layer
model.add(Conv2D(32, kernel_size=(5, 5), strides=(1, 1), padding='same',
                 activation='relu',
                 input_shape=train_X.shape[1:]))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
#model.add(Dropout(0.25))

###Second Convolutional layer
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.25))

###Second exta extra Convolutional layer
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.25))


###fully connected layer
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
#model.add(Dense(10, activation='softmax'))

###parameters for the model
model.compile(loss=keras.losses.categorical_crossentropy,
             optimizer=keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),
	     # optimizer=keras.optimizers.Adadelta(lr=1.0, rho=0.95, epsilon=None, decay=0.0),
              metrics=['accuracy'])





import h5py
import keras
from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input
from keras.models import Model
from keras.layers.pooling import MaxPooling2D,GlobalAveragePooling2D
from keras.applications.xception import Xception

import cv2
re_train_data=[]
for i in train_X:
    re_train_data.append(cv2.resize(i,(96,96)))
train_X_new=np.array(re_train_data)


re_test_data=[]
for i in test_X:
    re_test_data.append(cv2.resize(i,(96,96)))
test_X_new=np.array(re_test_data)



base_model=Xception(include_top=False, weights='imagenet',input_shape=(96,96,3))


outputs = Dense(10, activation='softmax')(GlobalAveragePooling2D()(base_model.output))
model = Model(base_model.inputs, outputs)
model.compile(optimizer="adam",
              loss="categorical_crossentropy",
              metrics=["accuracy"])


#model.fit_generator(datagen.flow(x_train,y_train,batch_size=128),samples_per_epoch=50000,epochs=100)


model.fit(train_X_new[:70000],train_y[:70000],validation_data=(train_X_new[70000:], train_y[70000:]),batch_size=128,epochs=10, shuffle =True)


if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(train_X_new[:70000], train_y[:70000],
              batch_size=batch_size,
              epochs=8,
              validation_data=(train_X_new[70000:], train_y[70000:]),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=False,  # randomly flip images
        vertical_flip=True)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(train_X_new)
    print(train_X_new.shape)
    print(train_y.shape)
    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(train_X_new[:63000], train_y[:63000],
                                     batch_size=batch_size),
                        epochs=1,
                        validation_data=(train_X_new[63000:], train_y[63000:]),
                        workers=4)


prediction = model.predict(test_X_new, batch_size=32, verbose=1)

import pandas as pd
prediction = pd.DataFrame(prediction)
prediction.to_csv("prediction_6.csv")

# Save model and weights
import os
save_dir = "."

if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
print('Saved trained model at %s ' % model_path)


